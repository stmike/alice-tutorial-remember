const { includes } = require('lodash');

module.exports = {
  // Контекст разговора (т.е. о чём только-что говорилось):
  CONTEXT: {
    empty: 'empty', // память пуста: юзеру предлагалось что-то запомнить 
    full: 'full',   // память заполнена: юзеру предлагалось забыть имеющееся или запомнить что-то новое  
    help: 'help'    // юзеру читались правила по его запросу "Помощь" или "Что ты умеешь?" (обязательное условие для прохождения модерации)
  },

  // Намерения юзера (т.е. о чём юзер просит):
  INTENT: {
    remember: 'remember', // юзер высказал намерение чтобы навык что-то запомнил
    forget: 'forget',     // юзер высказал намерение чтобы навык всё забыл
    help: 'help',         // юзер запросил помощь (справку) или спросил: "Что ты умеешь?"
    repeat: 'repeat',     // юзер переспросил (попросил повторить)
    exit: 'exit',         // юзер высказал намерение выйти из навыка
  },


  getIntent: function (userPhrase, context) {
    // Юзер просит запомнить:
    const rememberSnippet = ['запомни', 'запомнить', 'напомни', 'напомнить', 'помни', 'помнить'];

    for (let item of rememberSnippet) {
      if (includes(userPhrase, item)) {
        return 'remember';
      }
    }

    // Юзер просит забыть:
    const forgetSnippet = ['забудь', 'забыть', 'очисти память', 'сотри из памяти'];

    for (let item of forgetSnippet) {
      if (includes(userPhrase, item)) {
        return 'forget';
      }
    }

    // Юзер просит помощь:
    const helpSnippet = ['помощь', 'что ты умеешь', 'помощи', 'справка', 'справку', 'что еще ты умеешь',
      'что ты еще умеешь', 'что ты вообще умеешь', 'что вообще ты умеешь', 'что ты можешь', 'что еще ты можешь',
      'что ты еще можешь', 'что ты вообще можешь', 'что вообще ты можешь'];

    for (let item of helpSnippet) {
      if (includes(userPhrase, item)) {
        return 'help';
      }
    }

    // Юзер просит повторить:
    const repeatSnippet = ['повтори', 'повторить', 'повторите', 'повторно', 'повтор', 'не расслышал',
      'не расслышала', 'не услышал', 'не услышала', 'не понял', 'не поняла', 'не слышно', 'плохо слышно',
      'что ты сказал', 'что вы сказали', 'скажи еще раз', 'скажите еще раз'];

    for (let item of repeatSnippet) {
      if (includes(userPhrase, item)) {
        return 'repeat';
      }
    }

    // Юзер хочет выйти из навыка:
    const exitSnippet = ['завершить', 'хватит', 'достаточно', 'закрыть', 'закрой', 'закрывай', 'закрывайте',
      'выйти', 'выход', 'закончить', 'алиса вернись', 'вернись алиса', 'до свидания', 'до свиданья', 'до встречи',
      'до следующей встречи', 'до новой встречи', 'спокойной ночи', 'до завтра'];

    for (let item of exitSnippet) {
      if (includes(userPhrase, item)) {
        return 'exit';
      }
    }

    // Пример, когда решение принимается исходя из контекста; полезно применять для обработки общих фраз юзера:
    if (context === 'empty' || context === 'full') {
      const additionalExitSnippet = ['нет', 'не хочу', 'не желаю'];
      for (let item of additionalExitSnippet) {
        if (includes(userPhrase, item)) {
          return 'exit';
        }
      }
    }

    // Всё остальное (т.е. непонятое):
    return 'fallback';
  }
};
